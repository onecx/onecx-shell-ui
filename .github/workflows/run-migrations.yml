name: Run Migrations

on:
  pull_request:
    types: [labeled]

permissions:
  contents: write
  pull-requests: write

jobs:
  run-migrations:
    if: contains(github.event.label.name, 'nx-migration-required') || contains(github.event.label.name, 'onecx-migration-required')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Extract changed packages per directory
        id: extract-packages
        run: |
          set -e
          
          # Ensure we have the base branch
          git fetch origin ${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}
          
          # Get the merge base
          merge_base=$(git merge-base HEAD origin/${{ github.event.pull_request.base.ref }})
          
          # Find all changed package.json files
          changed_files=$(git diff --name-only $merge_base...HEAD | grep package.json || true)
          
          echo "Changed package.json files: $changed_files"
          
          # Process each package.json file separately with its directory
          migration_commands=""
          if [[ -n "$changed_files" ]]; then
            for file in $changed_files; do
              if [[ -f "$file" ]]; then
                echo "Processing $file"
                
                # Get the directory of this package.json
                package_dir=$(dirname "$file")
                echo "Package directory: $package_dir"
                
                # Get old and new package.json content
                old_content=$(git show $merge_base:$file 2>/dev/null || echo '{}')
                new_content=$(cat "$file")
                
                # Extract changed packages for this specific package.json using Node.js
                file_migrations=$(node -e "
                  const oldPkg = JSON.parse(\`$old_content\`);
                  const newPkg = JSON.parse(\`$new_content\`);
                  
                  const oldDeps = { ...oldPkg.dependencies, ...oldPkg.devDependencies };
                  const newDeps = { ...newPkg.dependencies, ...newPkg.devDependencies };
                  
                  const migrations = [];
                  
                  // Check for ALL package updates with --from parameter
                  for (const [pkg, newVersion] of Object.entries(newDeps)) {
                    if (oldDeps[pkg] && oldDeps[pkg] !== newVersion) {
                      migrations.push(\`$package_dir:\${pkg}@\${newVersion} --from=\${pkg}@\${oldDeps[pkg]}\`);
                      console.error(\`Found update in $package_dir: \${pkg} from \${oldDeps[pkg]} to \${newVersion}\`);
                    }
                  }
                  
                  console.log(migrations.join('|'));
                ")
                
                if [[ -n "$file_migrations" ]]; then
                  if [[ -n "$migration_commands" ]]; then
                    migration_commands="$migration_commands|$file_migrations"
                  else
                    migration_commands="$file_migrations"
                  fi
                fi
              fi
            done
          fi
          
          echo "migration_commands=$migration_commands" >> $GITHUB_OUTPUT
          echo "Final migration commands to run: '$migration_commands'"

      - name: Install root dependencies
        run: npm ci

      - name: Run migrations per directory
        if: steps.extract-packages.outputs.migration_commands != ''
        run: |
          set -e
          
          echo "=========================================="
          echo "🚀 STARTING PACKAGE MIGRATIONS PER DIRECTORY"
          echo "=========================================="
          echo "Migration commands: ${{ steps.extract-packages.outputs.migration_commands }}"
          echo "=========================================="
          
          # Split migration commands by | and run each one in its directory
          IFS='|' read -ra MIGRATION_COMMANDS <<< "${{ steps.extract-packages.outputs.migration_commands }}"
          
          for cmd in "${MIGRATION_COMMANDS[@]}"; do
            if [[ -n "$cmd" && "$cmd" != " " ]]; then
              # Extract directory and migration command
              dir=$(echo "$cmd" | cut -d':' -f1)
              migration=$(echo "$cmd" | cut -d':' -f2-)
              
              echo ""
              echo "┌─────────────────────────────────────────┐"
              echo "│ Running in directory: $dir"
              echo "│ Migration: nx migrate $migration"
              echo "└─────────────────────────────────────────┘"
              
              # Change to the package directory and run migration
              (
                cd "$dir" || { echo "❌ Failed to change to directory $dir"; continue; }
                
                echo "📂 Working directory: $(pwd)"
                
                # Install dependencies in this directory if package.json exists
                if [[ -f "package.json" ]]; then
                  echo "📦 Installing dependencies in $dir..."
                  npm ci || echo "⚠️ Failed to install dependencies in $dir, continuing..."
                fi
                
                echo "🔧 Running migration: npx nx migrate $migration"
                npx nx migrate $migration || echo "❌ No migrations for '$migration' in $dir or migration failed"
                
                # Install any new dependencies from migrations
                if [[ -f "package.json" ]]; then
                  echo "📦 Installing new dependencies after migration..."
                  npm install || echo "⚠️ Failed to install new dependencies in $dir"
                fi
                
                # Run the actual migrations if they exist
                if [[ -f "migrations.json" ]]; then
                  echo "🔧 Found migrations.json in $dir - executing migration scripts..."
                  npx nx migrate --run-migrations || echo "❌ No migrations to run in $dir"
                  echo "✅ Migration scripts completed in $dir"
                else
                  echo "ℹ️ No migrations.json found in $dir"
                fi
              )
              
              echo "✅ Completed migration in directory: $dir"
              echo "─────────────────────────────────────────"
            fi
          done
          
          echo ""
          echo "=========================================="
          echo "🎉 ALL DIRECTORY MIGRATIONS COMPLETED"
          echo "=========================================="

      - name: Commit all migration changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Pull any changes from remote first
          git pull origin ${{ github.event.pull_request.head.ref }} || echo "No remote changes to pull"
          
          if [[ -n "$(git status --porcelain)" ]]; then
            echo ""
            echo "=========================================="
            echo "📝 COMMITTING ALL MIGRATION CHANGES"
            echo "=========================================="
            
            echo "Changed files:"
            git status --porcelain
            
            git add .
            git commit --no-verify -m "refactor: run package migrations per directory

            Auto-generated by GitHub Actions after dependency updates.
            Migrations run in their respective package directories for proper context."
            
            # Push to the PR branch
            git push origin HEAD:${{ github.event.pull_request.head.ref }}
            
            echo "✅ All migration changes committed and pushed"
            echo "=========================================="
          else
            echo ""
            echo "=========================================="
            echo "ℹ️ NO CHANGES TO COMMIT"
            echo "=========================================="
          fi
          
          # Determine which label to remove based on the event
          if [[ "${{ contains(github.event.label.name, 'nx-migration-required') }}" == "true" ]]; then
            gh pr edit ${{ github.event.pull_request.number }} --remove-label "nx-migration-required"
          fi
          if [[ "${{ contains(github.event.label.name, 'onecx-migration-required') }}" == "true" ]]; then
            gh pr edit ${{ github.event.pull_request.number }} --remove-label "onecx-migration-required"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
